{"version":3,"sources":["../../src/endpoints/index.ts"],"sourcesContent":["import type { PayloadRequest } from 'payload'\n\nimport type { ActionMenuItems, Endpoints } from '../types.js'\n\nimport { GenerationModels } from '../ai/models/index.js'\nimport { defaultPrompts } from '../ai/prompts.js'\nimport {\n  PLUGIN_API_ENDPOINT_GENERATE,\n  PLUGIN_API_ENDPOINT_GENERATE_UPLOAD,\n  PLUGIN_INSTRUCTIONS_TABLE,\n  PLUGIN_NAME,\n} from '../defaults.js'\nimport { registerEditorHelper } from '../libraries/handlebars/helpers.js'\nimport { handlebarsHelpersMap } from '../libraries/handlebars/helpersMap.js'\nimport { replacePlaceholders } from '../libraries/handlebars/replacePlaceholders.js'\n\nconst assignPrompt = async (\n  action: ActionMenuItems,\n  {\n    type,\n    actionParams,\n    context,\n    field,\n    layout,\n    systemPrompt = '',\n    template,\n  }: {\n    actionParams: Record<any, any>\n    context: object\n    field: string\n    layout: string\n    systemPrompt: string\n    template: string\n    type: string\n  },\n) => {\n  const prompt = await replacePlaceholders(template, context)\n  const toLexicalHTML = type === 'richText' ? handlebarsHelpersMap.toHTML.name : ''\n\n  const assignedPrompts = {\n    layout: type === 'richText' ? layout : undefined,\n    prompt,\n    //TODO: Define only once on a collection level\n    system: type === 'richText' ? systemPrompt : undefined,\n  }\n\n  if (action === 'Compose') {\n    return assignedPrompts\n  }\n\n  const { layout: getLayout, system: getSystemPrompt } = defaultPrompts.find(\n    (p) => p.name === action,\n  )\n\n  let updatedLayout = layout\n  if (getLayout) {\n    updatedLayout = getLayout()\n  }\n\n  const system = getSystemPrompt({\n    ...(actionParams || {}),\n    prompt,\n    systemPrompt,\n  })\n\n  return {\n    layout: updatedLayout,\n    // TODO: revisit this toLexicalHTML\n    prompt: await replacePlaceholders(`{{${toLexicalHTML} ${field}}}`, context),\n    system,\n  }\n}\n\nexport const endpoints: Endpoints = {\n  textarea: { //TODO:  This is the main endpoint for generating content - its just needs to be renamed to 'generate' or something.\n    handler: async (req: PayloadRequest) => {\n      const data = await req.json?.()\n\n      const { locale = 'en', options } = data\n      const { action, actionParams, instructionId } = options\n      const contextData = data.doc\n\n      if (!instructionId) {\n        throw new Error(\n          `Instruction ID is required for \"${PLUGIN_NAME}\" to work, please check your configuration`,\n        )\n      }\n\n      const instructions = await req.payload.findByID({\n        id: instructionId,\n        collection: PLUGIN_INSTRUCTIONS_TABLE,\n      })\n\n      const { collections } = req.payload.config\n      const collection = collections.find(\n        (collection) => collection.slug === PLUGIN_INSTRUCTIONS_TABLE,\n      )\n\n      const { custom: { [PLUGIN_NAME]: { editorConfig = {} } = {} } = {} } = collection.admin\n      const { schema: editorSchema = {} } = editorConfig\n      const { prompt: promptTemplate = '' } = instructions\n\n      const schemaPath = instructions['schema-path'] as string\n      const fieldName = schemaPath?.split('.').pop()\n\n      registerEditorHelper(req.payload, schemaPath)\n\n      const { defaultLocale, locales = [] } = req.payload.config.localization || {}\n      const localeData = locales.find((l) => {\n        return l.code === locale\n      })\n\n      const localeInfo = localeData?.label[defaultLocale] || locale\n\n      const model = GenerationModels.find((model) => model.id === instructions['model-id'])\n      const settingsName = model.settings?.name\n      const modelOptions = instructions[settingsName] || {}\n\n      const prompts = await assignPrompt(action, {\n        type: instructions['field-type'] as string,\n        actionParams,\n        context: contextData,\n        field: fieldName,\n        layout: instructions.layout,\n        systemPrompt: instructions.system,\n        template: promptTemplate as string,\n      })\n\n      console.log('Running handler with prompts:', prompts)\n      return model\n        .handler?.(prompts.prompt, {\n          ...modelOptions,\n          editorSchema,\n          layout: prompts.layout,\n          locale: localeInfo,\n          system: prompts.system,\n        })\n        .catch((error) => {\n          console.error('Error: endpoint - generating text:', error)\n          return new Response(JSON.stringify(error.message), { status: 500 })\n        })\n    },\n    method: 'post',\n    path: PLUGIN_API_ENDPOINT_GENERATE,\n  },\n  upload: {\n    handler: async (req: PayloadRequest) => {\n      const data = await req.json?.()\n\n      const { options } = data\n      const { instructionId } = options\n      const contextData = data.doc\n\n      let instructions = { 'model-id': '', prompt: '' }\n\n      if (instructionId) {\n        // @ts-expect-error\n        instructions = await req.payload.findByID({\n          id: instructionId,\n          collection: PLUGIN_INSTRUCTIONS_TABLE,\n        })\n      }\n\n      const { prompt: promptTemplate = '' } = instructions\n      const schemaPath = instructions['schema-path']\n\n      registerEditorHelper(req.payload, schemaPath)\n\n      const text = await replacePlaceholders(promptTemplate, contextData)\n      const modelId = instructions['model-id']\n      const uploadCollectionSlug = instructions['relation-to']\n\n      const model = GenerationModels.find((model) => model.id === modelId)\n      const settingsName = model.settings?.name\n      const modelOptions = instructions[settingsName] || {}\n\n      const result = await model.handler?.(text, modelOptions)\n\n      const assetData = await req.payload.create({\n        collection: uploadCollectionSlug,\n        data: result.data,\n        file: result.file,\n      })\n\n      return new Response(\n        JSON.stringify({\n          result: {\n            id: assetData.id,\n            alt: assetData.alt,\n          },\n        }),\n      )\n    },\n    method: 'post',\n    path: PLUGIN_API_ENDPOINT_GENERATE_UPLOAD,\n  },\n}\n"],"names":["GenerationModels","defaultPrompts","PLUGIN_API_ENDPOINT_GENERATE","PLUGIN_API_ENDPOINT_GENERATE_UPLOAD","PLUGIN_INSTRUCTIONS_TABLE","PLUGIN_NAME","registerEditorHelper","handlebarsHelpersMap","replacePlaceholders","assignPrompt","action","type","actionParams","context","field","layout","systemPrompt","template","prompt","toLexicalHTML","toHTML","name","assignedPrompts","undefined","system","getLayout","getSystemPrompt","find","p","updatedLayout","endpoints","textarea","handler","req","data","json","locale","options","instructionId","contextData","doc","Error","instructions","payload","findByID","id","collection","collections","config","slug","custom","editorConfig","admin","schema","editorSchema","promptTemplate","schemaPath","fieldName","split","pop","defaultLocale","locales","localization","localeData","l","code","localeInfo","label","model","settingsName","settings","modelOptions","prompts","console","log","catch","error","Response","JSON","stringify","message","status","method","path","upload","text","modelId","uploadCollectionSlug","result","assetData","create","file","alt"],"mappings":"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"}