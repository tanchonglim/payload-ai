{"version":3,"sources":["../../../src/ai/schemas/lexicalJsonSchema.ts"],"sourcesContent":["export const documentSchema = {\n  type: 'object',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  additionalProperties: false,\n  definitions: {\n    // Text Node (Leaf Node)\n    TextNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['text'] },\n        detail: {\n          type: 'number',\n          description: 'Text detail flags',\n          enum: [\n            0, // No details\n            1, // IS_DIRECTIONLESS\n            2, // IS_UNMERGEABLE\n            3, // IS_DIRECTIONLESS + IS_UNMERGEABLE\n          ],\n          examples: [\n            { description: 'No special details', value: 0 },\n            { description: 'Directionless', value: 1 },\n            { description: 'Unmergeable', value: 2 },\n            { description: 'Directionless + Unmergeable', value: 3 },\n          ],\n        },\n        direction: {\n          type: ['string', 'null'],\n          enum: ['ltr', null],\n        },\n        format: {\n          type: 'number',\n          description: `Format flags for text:\n    0 = No format\n    1 = Bold\n    2 = Italic\n    3 = Bold + Italic (1|2)\n    4 = Strikethrough\n    8 = Underline\n    9 = Bold + Underline (1|8)\n    16 = Code\n    32 = Subscript\n    64 = Superscript\n    128 = Highlight\n    \n    Formats can be combined using binary OR (|).\n    Example combinations:\n    - Bold + Italic = 1|2 = 3\n    - Bold + Underline = 1|8 = 9\n    - Italic + Underline = 2|8 = 10\n    - Bold + Italic + Underline = 1|2|8 = 11`,\n        },\n        indent: { type: 'number' },\n        mode: {\n          type: 'number',\n          description: 'Text mode flags',\n          enum: [\n            0, // Normal\n            1, // Token\n            2, // Segmented\n          ],\n          examples: [\n            { description: 'Normal text', value: 0 },\n            { description: 'Token text', value: 1 },\n            { description: 'Segmented text', value: 2 },\n          ],\n        },\n        style: {\n          type: 'string',\n          description: 'CSS style string (e.g., \"color: red; font-size: 12px;\")',\n        },\n        text: { type: 'string' },\n        version: { type: 'number' },\n      },\n      required: [\n        'type',\n        'text',\n        'format',\n        'style',\n        'mode',\n        'detail',\n        'direction',\n        'indent',\n        'version',\n      ],\n    },\n    // Styled Table Cell Node\n    TableCellNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['tablecell'] },\n        children: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/TextNode',\n          },\n        },\n        colSpan: { type: 'number' },\n        direction: {\n          type: ['string', 'null'],\n          enum: ['ltr', null],\n        },\n        headerState: { type: 'number' },\n        indent: { type: 'number' },\n        version: { type: 'number' },\n        width: {\n          type: ['null'],\n          enum: [null],\n        },\n      },\n      required: [\n        'type',\n        'children',\n        'headerState',\n        'colSpan',\n        'width',\n        'direction',\n        'indent',\n        'version',\n      ],\n    },\n    // Styled Table Row Node\n    TableRowNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['tablerow'] },\n        children: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/TableCellNode',\n          },\n        },\n        height: { type: 'number' },\n      },\n      required: ['type', 'children', 'height'],\n    },\n    // Styled Table Node\n    TableNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['table'] },\n        children: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/TableRowNode',\n          },\n        },\n      },\n      required: ['type', 'children'],\n    },\n    // Heading Node\n    HeadingNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['heading'] },\n        children: {\n          type: 'array',\n          items: {\n            anyOf: [{ $ref: '#/definitions/TextNode' }, { $ref: '#/definitions/LinkNode' }],\n          },\n        },\n        direction: {\n          type: ['string', 'null'],\n          enum: ['ltr', null],\n        },\n        indent: { type: 'number' },\n        tag: { type: 'string', enum: ['h1', 'h2', 'h3'] },\n        version: { type: 'number' },\n      },\n      required: ['type', 'tag', 'children', 'direction', 'indent', 'version'],\n    },\n    // Paragraph Node\n    ParagraphNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['paragraph'] },\n        children: {\n          type: 'array',\n          items: {\n            anyOf: [\n              { $ref: '#/definitions/TextNode' },\n              { $ref: '#/definitions/LinkNode' },\n              { $ref: '#/definitions/CodeNode' },\n            ],\n          },\n        },\n        direction: {\n          type: ['string', 'null'],\n          enum: ['ltr', null],\n        },\n        format: { type: 'string', enum: ['start', 'center', 'right'] },\n        indent: { type: 'number' },\n        textFormat: { type: 'number' },\n        textStyle: {\n          type: 'string',\n          description: 'CSS style string (e.g., \"color: red; font-size: 12px;\")',\n        },\n        version: { type: 'number' },\n      },\n      required: [\n        'type',\n        'children',\n        'direction',\n        'format',\n        'indent',\n        'textFormat',\n        'textStyle',\n        'version',\n      ],\n    },\n    // Link Node\n    LinkNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['link'] },\n        children: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/TextNode',\n          },\n        },\n        url: { type: 'string' },\n      },\n      required: ['type', 'url', 'children'],\n    },\n    // List Item Node\n    ListItemNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['listitem'] },\n        children: {\n          type: 'array',\n          items: {\n            anyOf: [{ $ref: '#/definitions/ParagraphNode' }, { $ref: '#/definitions/ListNode' }],\n          },\n        },\n      },\n      required: ['type', 'children'],\n    },\n    // List Node\n    ListNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['list'] },\n        children: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/ListItemNode',\n          },\n        },\n        listType: { type: 'string', enum: ['bullet', 'number'] },\n      },\n      required: ['type', 'listType', 'children'],\n    },\n    // Quote Node\n    QuoteNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['quote'] },\n        children: {\n          type: 'array',\n          items: {\n            anyOf: [{ $ref: '#/definitions/TextNode' }, { $ref: '#/definitions/ParagraphNode' }],\n          },\n        },\n      },\n      required: ['type', 'children'],\n    },\n    // Code Node\n    CodeNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['code'] },\n        code: { type: 'string' },\n        language: { type: 'string' },\n      },\n      required: ['type', 'code', 'language'],\n    },\n    // Horizontal Rule Node\n    HorizontalRuleNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['horizontalrule'] },\n      },\n      required: ['type'],\n    },\n    // Image Node\n    ImageNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['image'] },\n        alt: { type: 'string' },\n        caption: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/TextNode',\n          },\n        },\n        src: { type: 'string' },\n      },\n      required: ['type', 'src', 'alt', 'caption'],\n    },\n    // Root Node\n    RootNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['root'] },\n        children: {\n          type: 'array',\n          items: {\n            anyOf: [\n              { $ref: '#/definitions/TextNode' },\n              { $ref: '#/definitions/HeadingNode' },\n              { $ref: '#/definitions/ParagraphNode' },\n              { $ref: '#/definitions/LinkNode' },\n              { $ref: '#/definitions/ListNode' },\n              { $ref: '#/definitions/QuoteNode' },\n              { $ref: '#/definitions/CodeNode' },\n              { $ref: '#/definitions/HorizontalRuleNode' },\n              { $ref: '#/definitions/ImageNode' },\n              { $ref: '#/definitions/TableNode' },\n            ],\n          },\n        },\n        direction: {\n          type: ['string', 'null'],\n          enum: ['ltr', null],\n        },\n        indent: { type: 'number' },\n        version: { type: 'number' },\n      },\n      required: ['type', 'children', 'direction', 'indent', 'version'],\n    },\n  },\n  properties: {\n    root: {\n      $ref: '#/definitions/RootNode',\n    },\n  },\n  required: ['root'],\n}\n\nexport const lexicalJsonSchema = (customNodes = []) => {\n  const schema = JSON.parse(JSON.stringify(documentSchema))\n\n  // Add custom nodes to the Node definition\n  if (customNodes.length > 0) {\n    customNodes.forEach((customNode, index) => {\n      const customNodeName = `CustomNode${index + 1}`\n      schema.definitions[customNodeName] = customNode\n      schema.definitions.Node.oneOf.push({ $ref: `#/definitions/${customNodeName}` })\n    })\n  }\n\n  return schema\n}\n"],"names":["documentSchema","type","$schema","additionalProperties","definitions","TextNode","properties","enum","detail","description","examples","value","direction","format","indent","mode","style","text","version","required","TableCellNode","children","items","$ref","colSpan","headerState","width","TableRowNode","height","TableNode","HeadingNode","anyOf","tag","ParagraphNode","textFormat","textStyle","LinkNode","url","ListItemNode","ListNode","listType","QuoteNode","CodeNode","code","language","HorizontalRuleNode","ImageNode","alt","caption","src","RootNode","root","lexicalJsonSchema","customNodes","schema","JSON","parse","stringify","length","forEach","customNode","index","customNodeName","Node","oneOf","push"],"mappings":"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"}