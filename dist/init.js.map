{"version":3,"sources":["../src/init.ts"],"sourcesContent":["import type { Payload } from 'payload'\n\nimport type { PluginConfig } from './types.js'\n\nimport { GenerationModels } from './ai/models/index.js'\nimport { seedPrompts } from './ai/prompts.js'\nimport { systemGenerate } from './ai/utils/systemGenerate.js'\nimport { PLUGIN_INSTRUCTIONS_TABLE } from './defaults.js'\n\nexport const init = async (payload: Payload, fieldSchemaPaths, pluginConfig: PluginConfig) => {\n  payload.logger.info(`â€” AI Plugin: Initializing...`)\n\n  const paths = Object.keys(fieldSchemaPaths)\n\n  const fieldInstructionsMap = {}\n  for (let i = 0; i < paths.length; i++) {\n    const path = paths[i]\n    const { type: fieldType, label: fieldLabel, relationTo } = fieldSchemaPaths[path]\n    const entry = await payload.find({\n      collection: PLUGIN_INSTRUCTIONS_TABLE,\n      pagination: false,\n      where: {\n        'field-type': {\n          equals: fieldType,\n        },\n        'schema-path': {\n          equals: path,\n        },\n      },\n    })\n\n    if (!entry?.docs?.length) {\n      const { prompt, system } = seedPrompts({\n        fieldLabel,\n        fieldSchemaPaths,\n        fieldType,\n        path,\n      })\n\n      let generatedPrompt = '{{ title }}'\n      if (pluginConfig.generatePromptOnInit) {\n        generatedPrompt = await systemGenerate({\n          prompt,\n          system,\n        })\n        payload.logger.info(\n          `\\nPrompt generated for \"${fieldLabel}\" field:\\nprompt: ${generatedPrompt}\\n\\n`,\n        )\n      }\n\n      const instructions = await payload\n        .create({\n          collection: PLUGIN_INSTRUCTIONS_TABLE,\n          data: {\n            'field-type': fieldType,\n            'model-id': GenerationModels.find((a) => {\n              return a.fields.includes(fieldType)\n            })?.id,\n            prompt: generatedPrompt,\n            'relation-to': relationTo,\n            'schema-path': path,\n          },\n        })\n        .then((a) => a)\n        .catch((err) => {\n          console.log('â€” AI Plugin: Error creating Compose settings-', err)\n        })\n\n      // @ts-expect-error\n      if (instructions?.id) {\n        fieldInstructionsMap[path] = {\n          id: instructions.id,\n          fieldType,\n        }\n      }\n    } else {\n      const [instructions] = entry.docs\n      fieldInstructionsMap[path] = {\n        id: instructions.id,\n        fieldType,\n      }\n    }\n  }\n\n  if (pluginConfig.debugging) {\n    payload.logger.info(\n      `â€” AI Plugin: Enabled fields map: ${JSON.stringify(fieldInstructionsMap, null, 2)}`,\n    )\n  }\n\n  payload.logger.info(`â€” AI Plugin: Initialized!`)\n  if (pluginConfig.generatePromptOnInit) {\n    payload.logger.info(\n      '\\n\\n-AI Plugin: Example prompts are added to get you started, Now go break some code ðŸš€ðŸš€ðŸš€\\n\\n',\n    )\n  }\n}\n"],"names":["GenerationModels","seedPrompts","systemGenerate","PLUGIN_INSTRUCTIONS_TABLE","init","payload","fieldSchemaPaths","pluginConfig","logger","info","paths","Object","keys","fieldInstructionsMap","i","length","path","type","fieldType","label","fieldLabel","relationTo","entry","find","collection","pagination","where","equals","docs","prompt","system","generatedPrompt","generatePromptOnInit","instructions","create","data","a","fields","includes","id","then","catch","err","console","log","debugging","JSON","stringify"],"mappings":"AAIA,SAASA,gBAAgB,QAAQ,uBAAsB;AACvD,SAASC,WAAW,QAAQ,kBAAiB;AAC7C,SAASC,cAAc,QAAQ,+BAA8B;AAC7D,SAASC,yBAAyB,QAAQ,gBAAe;AAEzD,OAAO,MAAMC,OAAO,OAAOC,SAAkBC,kBAAkBC;IAC7DF,QAAQG,MAAM,CAACC,IAAI,CAAC,CAAC,4BAA4B,CAAC;IAElD,MAAMC,QAAQC,OAAOC,IAAI,CAACN;IAE1B,MAAMO,uBAAuB,CAAC;IAC9B,IAAK,IAAIC,IAAI,GAAGA,IAAIJ,MAAMK,MAAM,EAAED,IAAK;QACrC,MAAME,OAAON,KAAK,CAACI,EAAE;QACrB,MAAM,EAAEG,MAAMC,SAAS,EAAEC,OAAOC,UAAU,EAAEC,UAAU,EAAE,GAAGf,gBAAgB,CAACU,KAAK;QACjF,MAAMM,QAAQ,MAAMjB,QAAQkB,IAAI,CAAC;YAC/BC,YAAYrB;YACZsB,YAAY;YACZC,OAAO;gBACL,cAAc;oBACZC,QAAQT;gBACV;gBACA,eAAe;oBACbS,QAAQX;gBACV;YACF;QACF;QAEA,IAAI,CAACM,OAAOM,MAAMb,QAAQ;YACxB,MAAM,EAAEc,MAAM,EAAEC,MAAM,EAAE,GAAG7B,YAAY;gBACrCmB;gBACAd;gBACAY;gBACAF;YACF;YAEA,IAAIe,kBAAkB;YACtB,IAAIxB,aAAayB,oBAAoB,EAAE;gBACrCD,kBAAkB,MAAM7B,eAAe;oBACrC2B;oBACAC;gBACF;gBACAzB,QAAQG,MAAM,CAACC,IAAI,CACjB,CAAC,wBAAwB,EAAEW,WAAW,kBAAkB,EAAEW,gBAAgB,IAAI,CAAC;YAEnF;YAEA,MAAME,eAAe,MAAM5B,QACxB6B,MAAM,CAAC;gBACNV,YAAYrB;gBACZgC,MAAM;oBACJ,cAAcjB;oBACd,YAAYlB,iBAAiBuB,IAAI,CAAC,CAACa;wBACjC,OAAOA,EAAEC,MAAM,CAACC,QAAQ,CAACpB;oBAC3B,IAAIqB;oBACJV,QAAQE;oBACR,eAAeV;oBACf,eAAeL;gBACjB;YACF,GACCwB,IAAI,CAAC,CAACJ,IAAMA,GACZK,KAAK,CAAC,CAACC;gBACNC,QAAQC,GAAG,CAAC,iDAAiDF;YAC/D;YAEF,mBAAmB;YACnB,IAAIT,cAAcM,IAAI;gBACpB1B,oBAAoB,CAACG,KAAK,GAAG;oBAC3BuB,IAAIN,aAAaM,EAAE;oBACnBrB;gBACF;YACF;QACF,OAAO;YACL,MAAM,CAACe,aAAa,GAAGX,MAAMM,IAAI;YACjCf,oBAAoB,CAACG,KAAK,GAAG;gBAC3BuB,IAAIN,aAAaM,EAAE;gBACnBrB;YACF;QACF;IACF;IAEA,IAAIX,aAAasC,SAAS,EAAE;QAC1BxC,QAAQG,MAAM,CAACC,IAAI,CACjB,CAAC,iCAAiC,EAAEqC,KAAKC,SAAS,CAAClC,sBAAsB,MAAM,GAAG,CAAC;IAEvF;IAEAR,QAAQG,MAAM,CAACC,IAAI,CAAC,CAAC,yBAAyB,CAAC;IAC/C,IAAIF,aAAayB,oBAAoB,EAAE;QACrC3B,QAAQG,MAAM,CAACC,IAAI,CACjB;IAEJ;AACF,EAAC"}